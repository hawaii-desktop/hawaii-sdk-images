#!/usr/bin/python3
# vim: tabstop=8 expandtab shiftwidth=4 softtabstop=4

import sys, json, re, requests

try:
    version = sys.argv[1]
except IndexError:
    version = None

if not version:
    print("Usage: update-qt [version]", file=sys.stderr)
    sys.exit(1)

m = re.search(r'^(\d+\.\d+)\.\d+(-(?:alpha|beta|rc))*', version)
if m:
    major = m.group(1)
    if m.group(2):
        download_url = "http://download.qt.io/development_releases/qt/%s/%s/submodules" % (major, version)
    else:
        download_url = "http://download.qt.io/official_releases/qt/%s/%s/submodules" % (major, version)
else:
    print("Wrong version specified, use the MAJOR.MINOR.PATCHLEVEL format", file=sys.stderr)
    sys.exit(1)

checksums = {}
r = requests.get("%s/md5sums.txt" % download_url)
if r.status_code != 200:
    print("Failed to fetch Qt md5sums", file=sys.stderr)
    sys.exit(1)
for line in r.text.split("\n"):
    m = re.match('([a-zA-Z0-9]+)\s+(.+)', line)
    if m:
        checksum = m.group(1)
        filename = m.group(2)
        if filename.endswith(".tar.xz"):
            checksums[filename] = checksum

fp = open("org.hawaiios.Sdk.json", "r")
data = json.loads(fp.read())
for module in data.get("modules", []):
    if module["name"].startswith("qt5-") and len(module.get("sources", [])) >= 1:
        m = re.search(r'qt5-(.+)', module["name"])
        if m:
            module_name = m.group(1)
            filename = "%s-opensource-src-%s.tar.xz" % (module_name, version)

            module["sources"][0] = {
                "type": "archive",
                "url": download_url + "/" + filename,
                "md5": checksums[filename]
            }
        else:
            print("Failed to parse module name for %s" % module["name"], file=sys.stderr)
            sys.exit(1)

with open("org.hawaiios.Sdk.json", "w") as fp:
    fp.write(json.dumps(data, indent=4))
